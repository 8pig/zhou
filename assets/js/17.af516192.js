(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{172:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"vue-源码解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-源码解析","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue 源码解析")]),t._v(" "),e("h2",{attrs:{id:"认识flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#认识flow","aria-hidden":"true"}},[t._v("#")]),t._v(" 认识Flow")]),t._v(" "),e("p",[e("code",[t._v("Flow 是 facebook 出品的 JavaScript 静态类型检查工具。Vue.js 的源码利用了 Flow 做了静态类型检查，所以了解 Flow 有助于我们阅读源码。")])]),t._v(" "),e("h2",{attrs:{id:"为什么用-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么用-flow","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么用 Flow")]),t._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("JavaScript 是动态类型语言，它的灵活性有目共睹，但是过于灵活的副作用是很容易就写出非常隐蔽的隐患代码，在编译期甚至看上去都不会报错，但在运行阶段就可能出现各种奇怪的 bug。\n类型检查是当前动态类型语言的发展趋势，所谓类型检查，就是在编译期尽早发现（由类型错误引起的）bug，又不影响代码运行（不需要运行时动态检查类型），使编写 JavaScript 具有和编写 Java 等强类型语言相近的体验。\n项目越复杂就越需要通过工具的手段来保证项目的维护性和增强代码的可读性。 Vue.js 在做 2.0 重构的时候，在 ES2015 的基础上，除了 ESLint 保证代码风格之外，也引入了 Flow 做静态类型检查。之所以选择 Flow，主要是因为 Babel 和 ESLint 都有对应的 Flow 插件以支持语法，可以完全沿用现有的构建配置，非常小成本的改动就可以拥有静态类型检查的能力。")])])])}],!1,null,null,null);a.default=r.exports}}]);