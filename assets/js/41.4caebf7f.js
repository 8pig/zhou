(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{207:function(t,e,a){"use strict";a.r(e);var r=a(0),s=Object(r.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("虚拟DOM本质上是JavaScript对象,是对真实DOM的抽象\n状态变更时，记录新树和旧树的差异\n最后把差异更新到真正的dom中\n"),a("a",{attrs:{href:"https://github.com/Advanced-Interview-Question/front-end-interview/blob/master/docs/guide/virtualDom.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("虚拟DOM"),a("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"掌握"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#掌握","aria-hidden":"true"}},[this._v("#")]),this._v(" 掌握")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"谈谈mvvm的理解（mvc）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谈谈mvvm的理解（mvc）","aria-hidden":"true"}},[this._v("#")]),this._v(" 谈谈mvvm的理解（mvc）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"vue-响应式数据原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-响应式数据原理","aria-hidden":"true"}},[this._v("#")]),this._v(" vue 响应式数据原理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"如何检测数组变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何检测数组变化","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何检测数组变化")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"为何采用异步渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为何采用异步渲染","aria-hidden":"true"}},[this._v("#")]),this._v(" 为何采用异步渲染")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"nexttick实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nexttick实现原理","aria-hidden":"true"}},[this._v("#")]),this._v(" nextTick实现原理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"computed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#computed","aria-hidden":"true"}},[this._v("#")]),this._v(" computed")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"watch中的deep：-true是如何实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#watch中的deep：-true是如何实现的","aria-hidden":"true"}},[this._v("#")]),this._v(" watch中的deep： true是如何实现的")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"虚拟dom的优劣如何"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom的优劣如何","aria-hidden":"true"}},[this._v("#")]),this._v(" 虚拟DOM的优劣如何?")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("优点:")]),t._v(" "),a("p",[t._v("保证性能下限: 虚拟DOM可以经过diff找出最小差异,然后批量进行patch,这种操作虽然比不上手动优化,但是比起粗暴的DOM操作性能要好很多,因此虚拟DOM可以保证性能下限\n无需手动操作DOM: 虚拟DOM的diff和patch都是在一次更新中自动进行的,我们无需手动操作DOM,极大提高开发效率\n跨平台: 虚拟DOM本质上是JavaScript对象,而DOM与平台强相关,相比之下虚拟DOM可以进行更方便地跨平台操作,例如服务器渲染、移动端开发等等")]),t._v(" "),a("p",[t._v("缺点:")]),t._v(" "),a("p",[t._v("无法进行极致优化: 在一些性能要求极高的应用中虚拟DOM无法进行针对性的极致优化,比如VScode采用直接手动操作DOM的方式进行极端的性能优化")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"虚拟dom实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom实现原理","aria-hidden":"true"}},[this._v("#")]),this._v(" 虚拟DOM实现原理?")])}],!1,null,null,null);e.default=s.exports}}]);