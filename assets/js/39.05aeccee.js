(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{205:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"foreach-map-filter-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreach-map-filter-区别","aria-hidden":"true"}},[t._v("#")]),t._v(" foreach map filter 区别")]),t._v(" "),a("h2",{attrs:{id:"promise-怎么捕获异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-怎么捕获异常","aria-hidden":"true"}},[t._v("#")]),t._v(" promise 怎么捕获异常")]),t._v(" "),a("h2",{attrs:{id:"数组去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组去重","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组去重")]),t._v(" "),a("h2",{attrs:{id:"new-一个对象的时候发生了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-一个对象的时候发生了什么","aria-hidden":"true"}},[t._v("#")]),t._v(" new 一个对象的时候发生了什么")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("say")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 首先会开辟一块内存空间 存放"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),t._v("的实例\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 构造函数会执行把 类的属性和方法 指向到当前实例\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v(" 会把"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" 指向当前实例\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),t._v(" 隐式retrun "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("h2",{attrs:{id:"从输入网址到浏览器显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从输入网址到浏览器显示","aria-hidden":"true"}},[t._v("#")]),t._v(" 从输入网址到浏览器显示")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ol",[a("li",[t._v("浏览器检测缓存  如果有缓存则取缓存（强缓存 协议缓存）")]),t._v(" "),a("li",[t._v("DNS解析IP地址")]),t._v(" "),a("li",[t._v("根据IP地址 建立TCP3次握手")]),t._v(" "),a("li",[t._v("浏览器对服务端发起http 发起请求")]),t._v(" "),a("li",[t._v("浏览器接收响应 （涉及到http状态码）")]),t._v(" "),a("li",[t._v("页面加载css html 绘制AST语法树 DOM树 渲染样式")]),t._v(" "),a("li",[t._v("加载js 执行代码..")])])]),t._v(" "),a("h2",{attrs:{id:"http-状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码","aria-hidden":"true"}},[t._v("#")]),t._v(" http 状态码")]),t._v(" "),a("h2",{attrs:{id:"深拷贝浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝浅拷贝","aria-hidden":"true"}},[t._v("#")]),t._v(" 深拷贝浅拷贝")]),t._v(" "),a("h2",{attrs:{id:"addeventlistener的第三个参数-都有什么代表什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addeventlistener的第三个参数-都有什么代表什么","aria-hidden":"true"}},[t._v("#")]),t._v(" addEventListener的第三个参数 都有什么代表什么")]),t._v(" "),a("h2",{attrs:{id:"说下浏览器的缓存机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说下浏览器的缓存机制","aria-hidden":"true"}},[t._v("#")]),t._v(" 说下浏览器的缓存机制")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("浏览器的缓存机制可分为强缓存和协商缓存，服务端可以在响应头中增加Cache-Control/Expires来为当前资源设置缓存有效期(Cache-Control的max-age的优先级高于Expires)，浏览器再次发送请求时，会先判断缓存是否过期，如果未过期则命中强缓存，直接使用浏览器的本地缓存资源，如果已过期则使用协商缓存，协商缓存大致有以下两种方案：\n(1) 唯一标识：Etag(服务端响应携带) & If-None-Match(客户端请求携带)；\n(2) 最后修改时间： Last-Modified(服务端响应携带) & If-Modified-Since (客户端请求携带) ，其优先级低于Etag。\n服务端判断值是否一致，如果一致，则直接返回304通知浏览器使用本地缓存，如果不一致则返回新的资源。")])]),t._v(" "),a("h2",{attrs:{id:"get和post的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get和post的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" GET和POST的区别")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v('(1) GET请求在浏览器回退和刷新时是无害的，而POST请求会告知用户数据会被重新提交；\n(2) GET请求可以收藏为书签，POST请求不可以收藏为书签；\n(3) GET请求可以被缓存，POST请求不可以被缓存，除非在响应头中包含合适的Cache-Control/Expires字段，但是不建议缓存POST请求，其不满足幂等性，每次调用都会对服务器资源造成影响；\n(4) GET请求一般不具有请求体，因此只能进行url编码，而POST请求支持多种编码方式。\n(5) GET请求的参数可以被保留在浏览器的历史中，POST请求不会被保留；\n(6) GET请求因为是向URL添加数据，不同的浏览器厂商，代理服务器，web服务器都可能会有自己的长度限制，而POST请求无长度限制；\n(7) GET请求只允许ASCII字符，POST请求无限制，支持二进制数据；\n(8) GET请求的安全性较差，数据被暴露在浏览器的URL中，所以不能用来传递敏感信息，POST请求的安全性较好，数据不会暴露在URL中；\n(9) GET请求具有幂等性(多次请求不会对资源造成影响)，POST请求不幂等；\n(10) GET请求一般不具有请求体，请求中一般不包含100-continue 协议，所以只会发一次请求，而POST请求在发送数据到服务端之前允许双方"握手"，客户端先发送Expect:100-continue消息，询问服务端是否愿意接收数据，接收到服务端正确的100-continue应答后才会将请求体发送给服务端，服务端再响应200返回数据。')])]),t._v(" "),a("h2",{attrs:{id:"跨标签页的通讯方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨标签页的通讯方式有哪些","aria-hidden":"true"}},[t._v("#")]),t._v(" 跨标签页的通讯方式有哪些")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ul",[a("li",[t._v("BroadCast Channel")]),t._v(" "),a("li",[t._v("Service Worker")]),t._v(" "),a("li",[t._v("LocalStorage + window.onstorage监听")]),t._v(" "),a("li",[t._v("Shared Worker + 定时器轮询(setInterval)")]),t._v(" "),a("li",[t._v("IndexedDB + 定时器轮询(setInterval)")]),t._v(" "),a("li",[t._v("cookie + 定时器轮询(setInterval)")]),t._v(" "),a("li",[t._v("window.open + window.postMessage")]),t._v(" "),a("li",[t._v("Websocket")])])]),t._v(" "),a("h2",{attrs:{id:"delete-数组的itemm-数组的length-是否会-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete-数组的itemm-数组的length-是否会-1","aria-hidden":"true"}},[t._v("#")]),t._v(" delete 数组的itemm 数组的length 是否会-1")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("pre",[a("code",[t._v("不会， 因为delete删除的是对象的属性  key 还会在\n")])])]),t._v(" "),a("h2",{attrs:{id:"前端性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端性能优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 前端性能优化")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("pre",[a("code",[t._v("1. 减少请求资源大小或者次数　\n    - 减少并发和css js 包体大小， 雪碧图\n    - DNS预解析\n2. 服务端开启gzip\n3. 代码优化\n    - 减少闭包\n    - 卸载事件监听 关闭订阅 定时器\n    - css 和 js 加载\n4. vue框架\n    - 懒加载路由\n    - 打包分片\n    - 缓存路由\n    - 公共库cdn\n    - 同构nuxt\n")])])])])}],!1,null,null,null);s.default=n.exports}}]);