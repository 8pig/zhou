(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{173:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"arraylist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist","aria-hidden":"true"}},[t._v("#")]),t._v(" ArrayList")]),t._v(" "),s("h2",{attrs:{id:"泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型","aria-hidden":"true"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[s("code",[t._v("<E>泛型")]),t._v("\n指的是 装在集合中 所有的元素, 全部都是统一的什么类型 引用类型, 基本类型不可以"),s("br"),t._v(" "),s("code",[t._v('ArrayList<String> arr1 = new ArrayList<>(); ArrayList arr1 = new ArrayList(); arr1.add("str"); <String> 指的是arr1 中的元素必须都是字符串类型')])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"添加"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加","aria-hidden":"true"}},[t._v("#")]),t._v(" 添加")]),t._v(" "),s("p",[s("code",[t._v('arr1.add("abc");')])]),t._v(" "),s("ul",[s("li",[t._v("add 方法是有返回值的  true,对于 ArrayList add方法一定是成功的, 对于其它集合不一定成功")])]),t._v(" "),s("h2",{attrs:{id:"获取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取","aria-hidden":"true"}},[t._v("#")]),t._v(" 获取")]),t._v(" "),s("p",[s("code",[t._v("arr1.get(index)")])]),t._v(" "),s("ul",[s("li",[t._v("index 索引值 从0 开始")])]),t._v(" "),s("h2",{attrs:{id:"删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除","aria-hidden":"true"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),s("p",[s("code",[t._v("arr1.remove(index);")]),s("br"),t._v(" "),s("code",[t._v("arr1.removeAll(arr2); 清除交集")])]),t._v(" "),s("ul",[s("li",[t._v("index int类型")])]),t._v(" "),s("h2",{attrs:{id:"交集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#交集","aria-hidden":"true"}},[t._v("#")]),t._v(" 交集")]),t._v(" "),s("p",[s("code",[t._v("arr1.retainAll(c2);")])]),t._v(" "),s("h2",{attrs:{id:"包含"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包含","aria-hidden":"true"}},[t._v("#")]),t._v(" 包含")]),t._v(" "),s("p",[s("code",[t._v("arr1.containsAll(arr2)")])]),t._v(" "),s("h2",{attrs:{id:"长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#长度","aria-hidden":"true"}},[t._v("#")]),t._v(" 长度")]),t._v(" "),s("p",[s("code",[t._v("arr1.size();")])]),t._v(" "),s("h2",{attrs:{id:"存储数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储数字","aria-hidden":"true"}},[t._v("#")]),t._v(" 存储数字")]),t._v(" "),s("p",[s("code",[t._v("存储基本类型 需要使用 包装类 byte short int lonfg float 都变了char boolean")])]),t._v(" "),s("h2",{attrs:{id:"equals和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#equals和","aria-hidden":"true"}},[t._v("#")]),t._v(" equals和==")]),t._v(" "),s("ol",[s("li",[t._v("== 能比较基本数据类型也能比较引用数据类型\n"),s("ul",[s("li",[t._v("基本数据类型比较的是值")]),t._v(" "),s("li",[t._v("引用数据类型比较的是地址")])])]),t._v(" "),s("li",[t._v("equals 只能比较 引用数据类型\n"),s("ul",[s("li",[t._v("没重写之前 比较的是地址值, 底层依赖的是 == 号, 但是比较地址是没有意义的, 我们需要重写equals 方法 比较对象的属性值.")])])])]),t._v(" "),s("h2",{attrs:{id:"迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器","aria-hidden":"true"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),s("p",[s("code",[t._v("集合是用来存储元素的, 存储的元素需要查看, 那么就需要迭代(遍历)")])]),t._v(" "),s("h3",{attrs:{id:"自动类型提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动类型提升","aria-hidden":"true"}},[t._v("#")]),t._v(" 自动类型提升")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    Collection arr1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object obj = new Student();  自动提升为object ")]),t._v("\n    arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dd"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ee"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Iterator it "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Object b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" null"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        Student b1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Student"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        System"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"+"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("h2",{attrs:{id:"迭代器原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 迭代器原理")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("迭代器是对集合的遍历. 而每一个集合的内部的存储接口都是不同的, 所以每个集合的存和取都是不一样的, 那么就需要在每一个类中定义 hasNext(), next() 方法, 这样做可以 , 但是会让代码过于臃肿,"),s("br"),t._v("\n迭代器是将这一的方法向上抽取出接口, 然后在每个类内部, 定义自己的迭代方式, 这样做的方式好处有二, 1, 规定了整体集合体系的遍历方式hasNext() next()方法, 2. 代码由底层实现, 使用者不管怎么实现, 会用即可")])])])}],!1,null,null,null);a.default=r.exports}}]);